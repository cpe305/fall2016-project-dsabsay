!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
PerformanceRecord	PerformanceRecord.java	/^	public PerformanceRecord(float totalScore, Date date, int elapsedTimeSeconds) {$/;"	m	class:PerformanceRecord
PerformanceRecord	PerformanceRecord.java	/^public abstract class PerformanceRecord {$/;"	c
ProgressTracker	ProgressTracker.java	/^public class ProgressTracker {$/;"	c
RhythmRecord	RhythmRecord.java	/^	public RhythmRecord(int rhythmID, String rhythmType, float totalScore,$/;"	m	class:RhythmRecord
RhythmRecord	RhythmRecord.java	/^public class RhythmRecord $/;"	c
SightSinger	SightSinger.java	/^public class SightSinger {$/;"	c
SightSingingRecord	SightSingingRecord.java	/^	public SightSingingRecord(int melodyID, String melodyType, float totalScore,$/;"	m	class:SightSingingRecord
SightSingingRecord	SightSingingRecord.java	/^public class SightSingingRecord $/;"	c
UserConfiguration	UserConfiguration.java	/^public class UserConfiguration {$/;"	c
date	PerformanceRecord.java	/^	private Date date;$/;"	f	class:PerformanceRecord	file:
elapsedTimeSeconds	PerformanceRecord.java	/^	private int elapsedTimeSeconds;$/;"	f	class:PerformanceRecord	file:
getRhythmRecords	ProgressTracker.java	/^	public List<RhythmRecord> getRhythmRecords() {$/;"	m	class:ProgressTracker
getSightSingingRecords	ProgressTracker.java	/^	public List<SightSingingRecord> getSightSingingRecords() {$/;"	m	class:ProgressTracker
main	SightSinger.java	/^	public static void main(String args[]) {$/;"	m	class:SightSinger
melodyID	SightSingingRecord.java	/^	private int melodyID;$/;"	f	class:SightSingingRecord	file:
melodyType	SightSingingRecord.java	/^	private String melodyType;$/;"	f	class:SightSingingRecord	file:
melodyTypes	UserConfiguration.java	/^	private HashMap<String, String> melodyTypes;$/;"	f	class:UserConfiguration	file:
performanceType	RhythmRecord.java	/^	private final String performanceType = "rhythm";$/;"	f	class:RhythmRecord	file:
performanceType	SightSingingRecord.java	/^	private final String performanceType = "sightsinging";$/;"	f	class:SightSingingRecord	file:
pitchScore	SightSingingRecord.java	/^	private float pitchScore;$/;"	f	class:SightSingingRecord	file:
readRhythmRecords	ProgressTracker.java	/^	public HashMap<String, List<RhythmRecord>> readRhythmRecords() {$/;"	m	class:ProgressTracker
readSightSingingRecords	ProgressTracker.java	/^	public HashMap<String, List<SightSingingRecord>> readSightSingingRecords() {$/;"	m	class:ProgressTracker
rhythmID	RhythmRecord.java	/^	private int rhythmID;$/;"	f	class:RhythmRecord	file:
rhythmRecordsPath	UserConfiguration.java	/^	private String rhythmRecordsPath;$/;"	f	class:UserConfiguration	file:
rhythmScore	RhythmRecord.java	/^	private float rhythmScore;$/;"	f	class:RhythmRecord	file:
rhythmScore	SightSingingRecord.java	/^	private float rhythmScore;$/;"	f	class:SightSingingRecord	file:
rhythmType	RhythmRecord.java	/^	private String rhythmType;$/;"	f	class:RhythmRecord	file:
rhythmTypes	UserConfiguration.java	/^	private HashMap<String, String> rhythmTypes;$/;"	f	class:UserConfiguration	file:
savePerformanceRecord	ProgressTracker.java	/^	public void savePerformanceRecord(PerformanceRecord record) {$/;"	m	class:ProgressTracker
saveToDisk	PerformanceRecord.java	/^	public abstract void saveToDisk();$/;"	m	class:PerformanceRecord
saveToDisk	RhythmRecord.java	/^	public void saveToDisk() {$/;"	m	class:RhythmRecord
saveToDisk	SightSingingRecord.java	/^	public void saveToDisk() {$/;"	m	class:SightSingingRecord
sightSingingRecordsPath	UserConfiguration.java	/^	private String sightSingingRecordsPath;$/;"	f	class:UserConfiguration	file:
totalScore	PerformanceRecord.java	/^	private float totalScore;$/;"	f	class:PerformanceRecord	file:
totalScore	RhythmRecord.java	/^	private float totalScore;$/;"	f	class:RhythmRecord	file:
